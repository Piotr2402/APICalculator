/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;

import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-06T22:39:49.203+02:00")

@Api(value = "mul", description = "the mul API")
public interface MulApi {

    Logger log = LoggerFactory.getLogger(MulApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Multiply two numbers", nickname = "mul", notes = "Multiply two numbers send as parameters.", response = String.class, tags={ "mul", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Error") })
    @RequestMapping(value = "/mul",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> mul(@NotNull @ApiParam(value = "First element", required = true, defaultValue = "0") @Valid @RequestParam(value = "a", required = true, defaultValue="0") Double a,@NotNull @ApiParam(value = "Second element", required = true, defaultValue = "0") @Valid @RequestParam(value = "b", required = true, defaultValue="0") Double b) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        	Double result = a * b;
        	if (getAcceptHeader().get().contains("application/json")) {
        		JSONObject json = new JSONObject();
        		try {
					json.put("result", result);
				} catch (JSONException e) {
					e.printStackTrace();
				}
        		return new ResponseEntity<>(json.toString(), HttpStatus.OK);
            }
            if (getAcceptHeader().get().contains("application/xml")) {
            	return new ResponseEntity<>("<result>"+result.toString()+"</result>", HttpStatus.OK);
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default MulApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
